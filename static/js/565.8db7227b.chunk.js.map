{"version":3,"file":"static/js/565.8db7227b.chunk.js","mappings":"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","sources":["components/GetAPI/GetAPI.js","components/pages/Modal.jsx","webpack://react-homework-template/./src/components/styles.module.css?c458","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import axios from 'axios';\nconst BaseURL = 'https://api.themoviedb.org/3/';\nconst APIkey = '62527f4fbcbc619de4f3bda00e915376';\nconst page = '12';\n\nexport async function GetDataMovies() {\n  const res = await axios.get(\n    `${BaseURL}discover/movie?sort_by=popularity.desc&api_key=${APIkey}&page=${page}&language=en-US&include_adult=false`\n  );\n  return res.data.results;\n}\n\nexport async function GetSearchMovies(search) {\n  const res = await axios.get(\n    `${BaseURL}search/movie?api_key=${APIkey}&page=1&query=${search}`\n  );\n\n  return res.data.results;\n}\n\nexport async function GetMoviesByID(id) {\n  const res = await axios.get(\n    `${BaseURL}movie/${id}?language=en-US&api_key=${APIkey}`\n  );\n  return res;\n}\n\nexport async function GetMoviesByDetailed(id) {\n  const response = await axios.get(\n    `${BaseURL}movie/${id}/credits?api_key=${APIkey}&language=en-US`\n  );\n  return response;\n}\n\nexport async function GetMoviesReviews(id) {\n  const response = await axios.get(\n    `${BaseURL}movie/${id}/reviews?api_key=${APIkey}&language=en-US&page=1`\n  );\n  return response;\n}\n\n\n","import { nanoid } from 'nanoid';\nimport { useEffect, useState } from 'react';\nimport { Link, Outlet, useParams } from 'react-router-dom';\nimport { GetMoviesByID } from '../GetAPI/GetAPI';\n\nimport styles from '../styles.module.css';\n\nexport const Modal = () => {\n  const params = useParams();\n  const [res, setRes] = useState([]);\n\n  // const [ show, setShow]=useState(false)\n  const UrlImg = 'https://image.tmdb.org/t/p/w342/';\n\n  const { id } = params;\n\n  useEffect(() => {\n    GetMoviesByID(id).then(data => setRes(data.data));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const {\n    poster_path,\n    vote_average,\n    overview,\n    genres = [],\n    release_date,\n    title,\n  } = res;\n  const genresList = genres.map(genre => genre.name).join(' / ');\n  return (\n    <>\n      <h2>\n        {title}\n        {`(${release_date})`}\n      </h2>\n      <div className={styles.mod}>\n        <img src={`${UrlImg}${poster_path}`} alt={title}></img>\n        <ul className={styles.list}>\n          <li className={styles.listItem} key={nanoid()}>\n            <span className={styles.listTitle}>User score: </span>\n            {vote_average}\n          </li>\n          <li className={styles.listItem} key={nanoid()}>\n            <span className={styles.listTitle}>Overview: </span>\n            {overview}\n          </li>\n          <li className={styles.listItem} key={nanoid()}>\n            <span className={styles.listTitle}>Genres: </span>\n            {genresList}\n          </li>\n        </ul>\n      </div>\n      <h3>Additional information</h3>\n      <nav className={styles.link}>\n        <Link to=\"cast\">Cast</Link>\n        <Link to=\"reviews\">Reviews</Link>\n      </nav>\n      <Outlet />\n    </>\n  );\n};\n\nexport default Modal;\n","// extracted by mini-css-extract-plugin\nexport default {\"mod\":\"styles_mod__qShSk\",\"list\":\"styles_list__+i54u\",\"listItem\":\"styles_listItem__8c1uL\",\"listTitle\":\"styles_listTitle__PsV3f\",\"listCast\":\"styles_listCast__E0bqC\",\"listItemCast\":\"styles_listItemCast__RnPtf\",\"link\":\"styles_link__E2HOR\"};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["BaseURL","APIkey","GetDataMovies","axios","res","data","results","GetSearchMovies","search","GetMoviesByID","id","GetMoviesByDetailed","response","GetMoviesReviews","Modal","params","useParams","useState","setRes","useEffect","then","poster_path","vote_average","overview","genres","release_date","title","genresList","map","genre","name","join","className","styles","src","alt","nanoid","to","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}