{"version":3,"file":"static/js/639.62588240.chunk.js","mappings":"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","sources":["GetAPI/GetAPI.js","../node_modules/nanoid/index.browser.js","pages/Modal.jsx","webpack://react-homework-template/./src/pages/styles.module.css?be7c"],"sourcesContent":["import axios from 'axios';\nconst BaseURL = 'https://api.themoviedb.org/3/';\nconst APIkey = '62527f4fbcbc619de4f3bda00e915376';\nconst page = '12';\n\nexport async function GetDataMovies() {\n  const res = await axios.get(\n    `${BaseURL}discover/movie?sort_by=popularity.desc&api_key=${APIkey}&page=${page}&language=en-US&include_adult=false`\n  );\n  return res.data.results;\n}\n\nexport async function GetSearchMovies(search) {\n  const res = await axios.get(\n    `${BaseURL}search/movie?api_key=${APIkey}&page=1&query=${search}`\n  );\n\n  return res.data.results;\n}\n\nexport async function GetMoviesByID(id) {\n  const res = await axios.get(\n    `${BaseURL}movie/${id}?language=en-US&api_key=${APIkey}`\n  );\n  return res;\n}\n\nexport async function GetMoviesByDetailed(id) {\n  const response = await axios.get(\n    `${BaseURL}movie/${id}/credits?api_key=${APIkey}&language=en-US`\n  );\n  return response;\n}\n\nexport async function GetMoviesReviews(id) {\n  const response = await axios.get(\n    `${BaseURL}movie/${id}/reviews?api_key=${APIkey}&language=en-US&page=1`\n  );\n  return response;\n}\n\n\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { nanoid } from 'nanoid';\nimport { useEffect, useState } from 'react';\nimport {\n  Link,\n  Outlet,\n  useLocation,\n  // useNavigate,\n  useParams,\n} from 'react-router-dom';\nimport { GetMoviesByID } from '../GetAPI/GetAPI';\nimport styles from './styles.module.css';\n\nexport const Modal = () => {\n  const params = useParams();\n  const [res, setRes] = useState([]);\n  const location = useLocation();\n  const UrlImg = 'https://image.tmdb.org/t/p/w342/';\n  const { id } = params;\n  // const navigate = useNavigate();\n\n  useEffect(() => {\n   GetMoviesByID(id).then(data => setRes(data.data));\n    \n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n \n  const {\n    poster_path,\n    vote_average,\n    overview,\n    genres = [],\n    release_date,\n    title,\n  } = res;\n\n  const genresList = genres.map(genre => genre.name).join(' / ');\n\n  return (\n    <>\n      <Link to={location.state}>Back</Link>\n\n      <h2>\n        {title}\n        {`(${release_date})`}\n      </h2>\n      <div className={styles.mod}>\n        {poster_path ? ( <img src={`${UrlImg}${poster_path}`} alt={title}></img>): (\n              <img\n                src=\"http://pdd.com.ua/r/r/AD4F3523-2DF3-11E0-A64B-00E081B0C1AE/3.34_b.gif\"\n                alt=\"None\"\n                width=\"150\"\n              ></img>\n            )}\n       \n        <ul className={styles.list}>\n          <li className={styles.listItem} key={nanoid()}>\n            <span className={styles.listTitle}>User score: </span>\n            {vote_average}\n          </li>\n          <li className={styles.listItem} key={nanoid()}>\n            <span className={styles.listTitle}>Overview: </span>\n            {overview}\n          </li>\n          <li className={styles.listItem} key={nanoid()}>\n            <span className={styles.listTitle}>Genres: </span>\n            {genresList}\n          </li>\n        </ul>\n      </div>\n      <h3>Additional information</h3>\n      <nav className={styles.link}>\n        <Link to=\"cast\" state={location.state}>\n          Cast\n        </Link>\n        <Link to=\"reviews\" state={location.state}>\n          Reviews\n        </Link>\n      </nav>\n      <Outlet />\n    </>\n  );\n};\n\nexport default Modal;\n","// extracted by mini-css-extract-plugin\nexport default {\"mod\":\"styles_mod__OMxc-\",\"list\":\"styles_list__-PSh5\",\"listItem\":\"styles_listItem__eNZgm\",\"listTitle\":\"styles_listTitle__TcaRI\",\"listCast\":\"styles_listCast__hURBZ\",\"listItemCast\":\"styles_listItemCast__mlHwa\",\"link\":\"styles_link__xTnBI\"};"],"names":["BaseURL","APIkey","GetDataMovies","axios","res","data","results","GetSearchMovies","search","GetMoviesByID","id","GetMoviesByDetailed","response","GetMoviesReviews","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","Modal","params","useParams","useState","setRes","location","useLocation","useEffect","then","poster_path","vote_average","overview","genres","release_date","title","genresList","map","genre","name","join","to","state","className","styles","src","alt","width"],"sourceRoot":""}