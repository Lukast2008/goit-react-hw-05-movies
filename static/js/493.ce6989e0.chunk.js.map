{"version":3,"file":"static/js/493.ce6989e0.chunk.js","mappings":"mTACMA,EAAU,gCACVC,EAAS,mCAGR,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACaC,EAAAA,EAAAA,IAAA,UACbH,EADa,0DAC4CC,EAD5C,iBAHP,KAGO,wCADb,cACCG,EADD,yBAIEA,EAAIC,KAAKC,SAJX,kEAOA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,uFACaL,EAAAA,EAAAA,IAAA,UACbH,EADa,gCACkBC,EADlB,yBACyCO,IAFtD,cACCJ,EADD,yBAKEA,EAAIC,KAAKC,SALX,kEAQA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA6BC,GAA7B,uFACaP,EAAAA,EAAAA,IAAA,UACbH,EADa,iBACGU,EADH,mCACgCT,IAF7C,cACCG,EADD,yBAIEA,GAJF,kEAOA,SAAeO,EAAtB,+CAAO,OAAP,oBAAO,WAAmCD,GAAnC,uFACkBP,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACFU,EADE,4BACoBT,EADpB,oBADlB,cACCW,EADD,yBAIEA,GAJF,kEAOA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAgCH,GAAhC,uFACkBP,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACFU,EADE,4BACoBT,EADpB,2BADlB,cACCW,EADD,yBAIEA,GAJF,kE,uGCWP,UAvCa,WACX,IAAME,GAASC,EAAAA,EAAAA,MACf,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAEQR,EAAOI,EAAPJ,GAOR,OAJAS,EAAAA,EAAAA,YAAU,YACRR,EAAAA,EAAAA,IAAoBD,GAAIU,MAAK,SAAAR,GAAQ,OAAIM,EAAQN,EAASP,KAAKgB,KAA1B,GACtC,GAAE,CAACX,EAAIQ,IAEY,IAAhBD,EAAKK,QAAqB,4CAE5B,iCACE,kCACA,eAAIC,UAAWC,EAAAA,EAAAA,SAAf,SACGP,EAAKQ,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,aAAcC,EAAvB,EAAuBA,UAAvB,OACR,gBAAIL,UAAWC,EAAAA,EAAAA,aAAf,UACGG,GACC,gBACEE,IAAG,UAfF,mCAeE,OAAcF,GACjBG,IAAKJ,EACLK,MAAM,SAGR,gBACEF,IAAI,wEACJC,IAAI,OACJC,MAAM,SAGV,0BAAOL,KACP,uCAAeE,QAfwBI,EAAAA,EAAAA,MADjC,QAsBjB,C,qBC3CD,KAAgB,IAAM,oBAAoB,KAAO,qBAAqB,SAAW,yBAAyB,UAAY,0BAA0B,SAAW,yBAAyB,aAAe,6BAA6B,KAAO,qB,wDCAhO,IAkBIA,EAAS,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAAC3B,EAAI4B,GAWvD,OARE5B,IAFF4B,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["GetAPI/GetAPI.js","pages/Cast.jsx","webpack://react-homework-template/./src/pages/styles.module.css?be7c","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import axios from 'axios';\nconst BaseURL = 'https://api.themoviedb.org/3/';\nconst APIkey = '62527f4fbcbc619de4f3bda00e915376';\nconst page = '12';\n\nexport async function GetDataMovies() {\n  const res = await axios.get(\n    `${BaseURL}discover/movie?sort_by=popularity.desc&api_key=${APIkey}&page=${page}&language=en-US&include_adult=false`\n  );\n  return res.data.results;\n}\n\nexport async function GetSearchMovies(search) {\n  const res = await axios.get(\n    `${BaseURL}search/movie?api_key=${APIkey}&page=1&query=${search}`\n  );\n\n  return res.data.results;\n}\n\nexport async function GetMoviesByID(id) {\n  const res = await axios.get(\n    `${BaseURL}movie/${id}?language=en-US&api_key=${APIkey}`\n  );\n  return res;\n}\n\nexport async function GetMoviesByDetailed(id) {\n  const response = await axios.get(\n    `${BaseURL}movie/${id}/credits?api_key=${APIkey}&language=en-US`\n  );\n  return response;\n}\n\nexport async function GetMoviesReviews(id) {\n  const response = await axios.get(\n    `${BaseURL}movie/${id}/reviews?api_key=${APIkey}&language=en-US&page=1`\n  );\n  return response;\n}\n\n\n","import { GetMoviesByDetailed } from '../GetAPI/GetAPI';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { nanoid } from 'nanoid';\nimport styles from './styles.module.css';\n\nconst Cast = () => {\n  const params = useParams();\n  const [info, setInfo] = useState([]);\n\n  const { id } = params;\n  const UrlImg = 'https://image.tmdb.org/t/p/w154';\n\n  useEffect(() => {\n    GetMoviesByDetailed(id).then(response => setInfo(response.data.cast));\n  }, [id, setInfo]);\n\n  if (info.length === 0) return <h2>Cast not found</h2>;\n  return (\n    <>\n      <h3>Cast</h3>\n      <ul className={styles.listCast}>\n        {info.map(({ name, profile_path, character }) => (\n          <li className={styles.listItemCast} key={nanoid()}>\n            {profile_path ? (\n              <img\n                src={`${UrlImg}${profile_path}`}\n                alt={name}\n                width=\"150\"\n              ></img>\n            ) : (\n              <img\n                src=\"http://pdd.com.ua/r/r/AD4F3523-2DF3-11E0-A64B-00E081B0C1AE/3.34_b.gif\"\n                alt=\"None\"\n                width=\"150\"\n              ></img>\n            )}\n            <span>{name}</span>\n            <p>Character: {character}</p>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\nexport default Cast;\n","// extracted by mini-css-extract-plugin\nexport default {\"mod\":\"styles_mod__OMxc-\",\"list\":\"styles_list__-PSh5\",\"listItem\":\"styles_listItem__eNZgm\",\"listTitle\":\"styles_listTitle__TcaRI\",\"listCast\":\"styles_listCast__hURBZ\",\"listItemCast\":\"styles_listItemCast__mlHwa\",\"link\":\"styles_link__xTnBI\"};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["BaseURL","APIkey","GetDataMovies","axios","res","data","results","GetSearchMovies","search","GetMoviesByID","id","GetMoviesByDetailed","response","GetMoviesReviews","params","useParams","useState","info","setInfo","useEffect","then","cast","length","className","styles","map","name","profile_path","character","src","alt","width","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}